#include<stdio.h>
#include<stdlib.h>
#include"IntStack2.h"
#define swap(type, x, y) do{type t=x;x=y;y=t;}while(0)


void quick_sort(int *a, int count);
void quick(int *a, int left, int right);

void quick(int *a, int left, int right)
{
	IntStack lstack, rstack;

	Initialize(&lstack, right - left + 1);// 공간 생성
	Initialize(&rstack, right - left + 1);// 공간 생성

	Push(&lstack, left);// 재귀호출시 오른쪽영역 왼쪽영역의 lstack rstack 각각 다시 Push
	Push(&rstack, right);
	int count_change = 0;
	while (!IsEmpty(&lstack))// 범위를 가른뒤 다시 시행
	{
		count_change++;
		printf("count_change: %d\n", count_change);
		Pop(&lstack, &left);
		Pop(&rstack, &right);

		int pl = left;
		int pr = right;
		int pivot = a[(pl + pr) / 2];

		int swap_count = 0;
		do
		{
			swap_count++;
			while (a[pl] < pivot) { pl++; }; // pivot보다 작다면 그냥넘어감
			while (a[pr] > pivot) { pr--; };
			if (pr >= pl)// pl이 크면(엇갈리면)교환중단
			{
				swap(int, a[pl], a[pr]);
				pl++;
				pr--;
			}

		} while (pr >= pl);// 이건 교체 버블( 한번시행시 1회 교환 )

		if (pr > left) /* 왼쪽먼저~ *///pr과 left의 값이 같아지면 종료
		{
			Push(&lstack, left);
			Push(&rstack, pr);
		}
		
		if (pl < right)/* 오른쪽먼저~ */
		{
			Push(&lstack, pl);
			Push(&rstack, right);
		}
		
	}
	Terminate(&lstack);
	Terminate(&rstack);

	return;
}

void quick_sort(int *a, int count)
{
	quick(a, 0, count - 1);
	
	return;
}
int main(void)
{
	int i, nx;
	int *x;
	
	puts("쿽 정렬");
	printf("요소 개수: ");
	scanf("%d", &nx);
	x = calloc(nx, sizeof(int));

	for (i = 0; i < nx; i++)
	{
		printf("x[%d] : ", i);
		scanf("%d", &x[i]);
	}

	quick_sort(x, nx);
	puts("오름차순으로 정렬했습니다.");

	for (i = 0; i < nx; i++)
		printf("x[%d] = %d\n", i, x[i]);
	free(x);

	return 0;
}

