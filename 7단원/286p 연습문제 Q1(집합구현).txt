#include<stdio.h>
#include<stdlib.h>
#include "IntSet.h"

/*---집합 초기화___*/
int Initialize(IntSet *s, int max)
{
	s->num = 0;
	if (s->set = calloc(max, sizeof(int)) == NULL) return -1;
	s->max = max;

	return 0;
}

/*--집합 s에 n이 들어있는지 확인(없으면 -1반환)---*/
int IsMember(const IntSet *s, int n)
{
	int i;

	for (i = 0; i < s->max; i++)
	{
		if (s->set[i] == n)return i;
	}
	return -1;
}

/*---집합 s에 n을 추가---*/
void Add(IntSet *s, int n)
{
	if (s->num < s->max&&s->max&&IsMember(s, n) == -1) 
	{
		s->set[s->num++] = n;
	}
}

/*---집합 s에서 n을 삭제---*/
void Remove(IntSet *s, int n)
{
	int index;
	if ((index = IsMember(s, n)) != -1)// 값n의 index반환
	{
		s->set[index] = s->set[--s->num];// 값n을 index 덮는다.
	}
}

/*---집합 s에 넣을 수 있는 최대의 원소 개수를 반환---*/
int Capacity(const IntSet *s)
{
	return s->max;
}

/*---집합 s의 원소 개수---*/
int Size(const IntSet *s)
{
	return s->num;
}

/*---집합 s2를 s1에 대입---*/
void Assign(IntSet *s1, const IntSet *s2)
{
	int n = (s1->max > s2->num) ? s1->max : s2->num;
	int i;
	for (i = 0; i < n; i++)
	{
		s1->set[i] = s2->set[i];
	}
	s1->num = n;
}

/*---집합 s1과 s2가 같은지 확인---*/
int Equal(const IntSet *s1, const IntSet *s2)
{
	int i, j;

	for (i = 0; i < s1->num; i++)
	{
		for (j = 0; j < s2->num; j++)
		{
			if (s1->set[i] == s2->set[j])break;
		}
		if (s2->num == j)return 0;// num은 최대인덱스 +1
	}
	return 1;
}

/*---집합 s2와 s3의 합집합을 s1에 대입---*/
IntSet *Union(IntSet *s1, const IntSet *s2, const IntSet *s3)
{
	int i;

	Assign(s1, s2);

	for (i = 0; i < s3->num; i++)
	{
		Add(s1, s3->set[i]);
	}
	return s1;
}

/*---집합 s2와 s3의 교집합을 s1에 대입---*/
IntSet *Intersection(IntSet *s1, const IntSet *s2, const IntSet *s3)
{
	int i, j;

	for (i = 0; i < s2->num; i++)
	{
		for (j = 0; j < s3->num; j++)
		{
			if (s2->set[i] == s3->set[j])Add(s1, s2->set[i]);
		}
	}

	return s1;
}

/*---집합 s2에서 s3을 뺀 차집합을 s1에 대입---*/
IntSet *Difference(IntSet *s1, const IntSet *s2, const IntSet *s3)
{
	int i, j;

	for (i = 0; i < s1->num; i++)
	{
		for (j = 0; j < s3->num; j++)
		{
			if (s2->set[i] == s3->set[j])break;
		}
		if (j == s3->num)Add(s1, s2->set[i]);// 안같은 경우
	}

	return s1;
}

/*---집합 s의 모든 원소를 출력---*/
void Print(const IntSet *s)
{
	int i;

	printf(" { ");
	for (i = 0; i < s->num; i++)printf("%d", s->set[i]);
	printf("}");
}

/*---집합 sdml 모든 원소를 출력(줄 바꿈 문자 포함)---*/
void PrintLn(const IntSet *s)
{
	Print(s);
	putchar('\n');
}

/*---집합 종료---*/
void Terminate(IntSet *s)
{
	if (s->set != NULL) 
	{
		s->num = 0;
		s->max = 0;
		free(s);
	}
}

int IsFull(const IntSet *s)
{
	if (s->num >= s->max)return 1;
	
	return 0;
}

void Clear(IntSet *s)
{
	s->num = 0;
}

IntSet *symmetricDifference(IntSet *s1, const IntSet *s2, const IntSet *s3)
{
	Difference(s1, s2, s3);
	Difference(s1, s3, s2);// 같은 요소가 잇을리 없다.

	return s1;
}

IntSet *ToUnion(IntSet *s1, const IntSet *s2)
{
	int i;
	
	for (i = 0; i < s2->num; i++)
	{
		if (IsMember(s1, s2->set[i]) == -1)s1->set[s1->num++] = s2->set[i];
	}

	return s1;
}

IntSet *ToIntersection(IntSet *s1, const IntSet *s2)
{
	int i;

	while (i < s1->num)
	{
		if (IsMember(s2, s1->set[i]) != 1) { Remove(s1, s1->set[i]); }
		else { i++; }
	}

	return s1;
}

IntSet *ToDifference(IntSet *s1, const IntSet *s2)
{
	int i, j;

	for (i = 0; i < s1->num; i++)
	{
		for (j = 0; j < s2->num; j++)
		{
			if (s1->set[i] == s2->set[j]) break;
		}
		if (j != s2->num)Remove(s1, s1->set[i]);// set[i]에 s2와 같은 요소가 있을때
	}

	return s1;
}

int IsSubset(const IntSet *s1, const IntSet *s2)
{
	int i, j;

	for (i = 0; i < s1->num; i++)
	{
		for (j = 0; j < s2->num; j++)
		{
			if (s1->set[i] == s2->set[j]) break;
		}
		if (j == s2->num)return 0;// 같은요소가 없을때
	}
	return 1;
}

int IsProperSubset(const IntSet *s1, const IntSet *s2)
{
	if (IsSubset(s1, s2) == 1 && Equal(s1, s2) == 0)return 1;
	
	return 0;
}